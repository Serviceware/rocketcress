using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using Newtonsoft.Json.Linq;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;

namespace Rocketcress.SourceGenerators
{
    [Generator]
    public class SettingsGenerator : ISourceGenerator
    {
        public void Initialize(GeneratorInitializationContext context)
        {
        }

        public void Execute(GeneratorExecutionContext context)
        {
            context.AnalyzerConfigOptions.GlobalOptions.TryGetValue("build_property.rootnamespace", out var globalNamespaceName);
            var settingsFile = context.AdditionalFiles.FirstOrDefault(x => Path.GetFileName(x.Path) == "settings.json");
            if (settingsFile != null)
            {
                context.AnalyzerConfigOptions.GetOptions(settingsFile).TryGetValue("build_metadata.AdditionalFiles.TestContextClassName", out var contextClassName);
                if (string.IsNullOrWhiteSpace(contextClassName))
                    contextClassName = "Rocketcress.Core.Base.TestContextBase";

                var metadata = GetMetadata(settingsFile.Path);
                var sb = new StringBuilder();

                sb.AppendLine("// <auto-generated />")
                  .AppendLine("using Rocketcress.Core.Attributes;")
                  .AppendLine("using Rocketcress.Core.Base;")
                  .AppendLine("using Rocketcress.Core.Models;");

                sb.AppendLine()
                  .Append("namespace ").AppendLine(globalNamespaceName)
                  .AppendLine("{");

                sb.AppendLine("\t#region Setting Key Classes");
                GenerateKeyClasses(sb, metadata);
                sb.AppendLine("\t#endregion")
                  .AppendLine()
                  .AppendLine("\t#region Setting Classes");
                GenerateSettingClasses(sb, metadata, contextClassName);
                sb.AppendLine("\t#endregion")
                  .Append("}");

                context.AddSource("Settings.Designer.cs", SourceText.From(sb.ToString(), Encoding.UTF8));
            }
        }

        public SettingsMetadata GetMetadata(string settingsFilePath)
        {
            var settings = JObject.Parse(File.ReadAllText(settingsFilePath));

            var metadata = new SettingsMetadata();
            if (settings["KeyClasses"] != null)
            {
                foreach (var @class in settings["KeyClasses"].ToObject<Dictionary<string, string>>())
                {
                    metadata.KeyClasses.Add(new KeyClassMetadata
                    {
                        Prefix = @class.Key,
                        Name = @class.Value.EndsWith("Keys") ? @class.Value.Substring(0, @class.Value.Length - 4) : @class.Value
                    });
                }
            }
            else
            {
                metadata.KeyClasses.Add(new KeyClassMetadata
                {
                    Prefix = "TL_",
                    Name = "Translation"
                });
            }

            if (settings["SettingsTypes"] != null)
                metadata.SettingsTypes = settings["SettingsTypes"].ToObject<List<SettingsType>>();
            else
                metadata.SettingsTypes = new List<SettingsType>();

            var allKeys = settings["OtherSettings"]?.OfType<JProperty>().Select(x => x.Name).ToArray() ?? new string[0];
            foreach (var key in allKeys)
            {
                var match = Regex.Match(key, @"\A(\[(?<Tag>[^\]]+)\])?\s*(?<Name>.*)\Z");
                var tag = match.Groups["Tag"].Value;
                var name = match.Groups["Name"].Success ? match.Groups["Name"].Value : key;

                var keyClass = metadata.KeyClasses.Where(x => name.StartsWith(x.Prefix)).FirstOrDefault();
                if (keyClass != null)
                    keyClass.Keys.Add(new SettingsKey(key, keyClass.Prefix, tag, name.Substring(keyClass.Prefix.Length)));
                else
                    metadata.DefaultKeys.Add(new SettingsKey(key, null, tag, name));
            }

            return metadata;
        }

        private void GenerateKeyClasses(StringBuilder sb, SettingsMetadata metadata)
        {
            foreach (var @class in metadata.KeyClasses.Where(x => x.Keys.Count > 0))
            {
                sb.AppendLine($"\t[AddKeysClass(typeof({@class.Name}Keys))]");
            }

            sb.AppendLine("\tpublic static class SettingKeys")
              .AppendLine("\t{");
            GenerateFields(metadata.DefaultKeys, 0);

            foreach (var @class in metadata.KeyClasses.Where(x => x.Keys.Count > 0))
            {
                sb.AppendLine("\t}")
                  .AppendLine()
                  .Append("\tpublic static class ").Append(@class.Name).AppendLine("Keys")
                  .AppendLine("\t{");
                GenerateFields(@class.Keys, @class.Prefix.Length);
            }

            sb.AppendLine("\t}");

            void GenerateFields(IEnumerable<SettingsKey> keys, int prefixLength)
            {
                var hasKey = false;
                foreach (var key in keys)
                {
                    hasKey = true;
                    sb.Append("\t\tpublic static readonly string ")
                      .Append(key.Key)
                      .Append(" = \"")
                      .Append(key.FullKey)
                      .AppendLine("\";");
                }
                if (!hasKey)
                    sb.AppendLine("\t\t// Currently no keys are available in settings file.");
            }
        }

        private void GenerateSettingClasses(StringBuilder sb, SettingsMetadata metadata, string testContextClassName)
        {
            GenerateSettingClass("Setting", metadata.DefaultKeys);
            foreach (var @class in metadata.KeyClasses.Where(x => x.Keys.Count > 0))
            {
                sb.AppendLine();
                GenerateSettingClass(@class.Name, @class.Keys);
            }

            void GenerateSettingClass(string className, IEnumerable<SettingsKey> keys)
            {
                sb.AppendLine($"\tpublic static class {className}Values")
                  .AppendLine("\t{")
                  .AppendLine("\t\tprivate static readonly PropertyStorage _properties;")
                  .AppendLine($"\t\tprivate static SettingsBase _settings => {testContextClassName}.CurrentContext.Settings;")
                  .AppendLine()
                  .AppendLine($"\t\tstatic {className}Values()")
                  .AppendLine("\t\t{")
                  .AppendLine($"\t\t\t_properties = new PropertyStorage();")
                  .AppendLine($"\t\t\t{testContextClassName}.ContextChanged += (s,e) => _properties.Clear();")
                  .AppendLine("\t\t}")
                  .AppendLine();

                var hasKey = false;
                foreach (var key in keys)
                {
                    hasKey = true;
                    var type = metadata.SettingsTypes.FirstOrDefault(x => x.TagName == key.Tag)?.TypeName ?? "object";
                    sb.AppendLine($"\t\tpublic static {type} {key.Key} => _properties.GetProperty(() => _settings.Get<{type}>({className}Keys.{key.Key}));");
                }
                if (!hasKey)
                    sb.AppendLine("\t\t// Currently no keys are available in settings file.");

                sb.AppendLine("\t}");
            }
        }

        public class SettingsMetadata
        {
            public List<SettingsKey> DefaultKeys { get; } = new List<SettingsKey>();
            public List<KeyClassMetadata> KeyClasses { get; } = new List<KeyClassMetadata>();
            public List<SettingsType> SettingsTypes { get; set; }
        }

        public class KeyClassMetadata
        {
            public string Prefix { get; set; }
            public string Name { get; set; }
            public List<SettingsKey> Keys { get; } = new List<SettingsKey>();
        }

        public class SettingsKey
        {
            public string FullKey { get; }
            public string Prefix { get; }
            public string Tag { get; }
            public string Key { get; }

            public SettingsKey(string fullKey, string prefix, string tag, string key)
            {
                FullKey = fullKey;
                Prefix = prefix;
                Tag = tag;
                Key = key;
            }
        }

        public class SettingsType
        {
            public string TypeName { get; set; }
            public string TagName { get; set; }
        }
    }
}
