trigger:
  branches:
    include:
    - '*'
  paths:
    include:
    - src
    - build

pool:
  vmImage: 'windows-2019'

variables:
  packArguments: '--no-restore -o "$(Build.ArtifactStagingDirectory)" -p:TreatWarningsAsErrors=true -p:ContinuousIntegrationBuild=true'

steps:
- script: dotnet nuget locals all --clear
  displayName: "\U0001F4A3 Cleanup NuGet"

- task: DotNetCoreCLI@2
  displayName: "\U0001F4E6 NuGet restore"
  inputs:
    command: 'custom'
    projects: 'Rocketcress.sln'
    custom: 'restore'
    arguments: '-p:Configuration=Release'

- task: DotNetCoreCLI@2
  displayName: "\U0001F6E0 Build and pack projects"
  inputs:
    command: 'custom'
    projects: 'Rocketcress.sln'
    custom: 'pack'
    arguments: '-c Release $(packArguments)'

- task: DotNetCoreCLI@2
  displayName: "\U0001F6E0 Build and pack projects (signed)"
  inputs:
    command: 'custom'
    projects: 'Rocketcress.sln'
    custom: 'pack'
    arguments: '-c Release -p:ConfigureSign=true $(packArguments)'

- task: DotNetCoreCLI@2
  displayName: "\U0001F4E6 NuGet restore slim"
  inputs:
    command: 'custom'
    projects: 'Rocketcress.sln'
    custom: 'restore'
    arguments: '-p:Configuration=Release-Slim'

- task: DotNetCoreCLI@2
  displayName: "\U0001F6E0 Build and pack slim projects"
  inputs:
    command: 'custom'
    projects: 'Rocketcress.sln'
    custom: 'pack'
    arguments: '-c Release-Slim $(packArguments)'

- task: DotNetCoreCLI@2
  displayName: "\U0001F6E0 Build and pack slim projects (signed)"
  inputs:
    command: 'custom'
    projects: 'Rocketcress.sln'
    custom: 'pack'
    arguments: '-c Release-Slim -p:ConfigureSign=true $(packArguments)'

- task: PublishBuildArtifacts@1
  displayName: "\U0001F6EB Publish packages to Azure Pipeline"
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'

- powershell: |
    foreach ($file in Get-ChildItem *.nupkg) {
        Write-Output "Pushing $($file.name)..."
        [string]$output = dotnet nuget push --api-key $(NuGetApiKey) --source https://api.nuget.org/v3/index.json $file.FullName
        if ($output.Contains("already exists")) {
            Write-Output "Package already exists: $($file.Name)"
            $LASTEXITCODE = 0
        } elseif ($LASTEXITCODE -ne 0) {
            Write-Output $output
            break
        } else {
            Write-Output "Successfully pushed package: $($file.Name)"
        }
        Write-Output ""
    }
  displayName: "\U0001F680 Publish packages to nuget.org"
  workingDirectory: $(Build.ArtifactStagingDirectory)
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))