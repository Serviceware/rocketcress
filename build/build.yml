trigger:
  branches:
    include:
    - '*'
  paths:
    include:
    - src
    - build

pool:
  vmImage: 'windows-2019'

steps:
- task: DotNetCoreCLI@2
  displayName: "\U0001F6E0 Build and pack projects"
  inputs:
    command: 'custom'
    projects: 'Rocketcress.sln'
    custom: 'pack'
    arguments: '-c Release -p:TreatWarningsAsErrors=true --include-symbols -o "$(Build.ArtifactStagingDirectory)"'

- task: DotNetCoreCLI@2
  displayName: "\U0001F6E0 Build and pack projects (signed)"
  inputs:
    command: 'custom'
    projects: 'Rocketcress.sln'
    custom: 'pack'
    arguments: '-c Release -p:TreatWarningsAsErrors=true -p:ConfigureSign=true --include-symbols -o "$(Build.ArtifactStagingDirectory)"'

- task: DotNetCoreCLI@2
  displayName: "\U0001F6E0 Build and pack slim projects"
  inputs:
    command: 'custom'
    projects: 'Rocketcress.sln'
    custom: 'pack'
    arguments: '-c Release-Slim -p:TreatWarningsAsErrors=true --include-symbols -o "$(Build.ArtifactStagingDirectory)"'

- task: DotNetCoreCLI@2
  displayName: "\U0001F6E0 Build and pack slim projects (signed)"
  inputs:
    command: 'custom'
    projects: 'Rocketcress.sln'
    custom: 'pack'
    arguments: '-c Release-Slim -p:TreatWarningsAsErrors=true -p:ConfigureSign=true --include-symbols -o "$(Build.ArtifactStagingDirectory)"'

- task: PublishBuildArtifacts@1
  displayName: "\U0001F6EB Publish packages to Azure Pipeline"
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'

- script: dotnet nuget push --api-key $(NUGETAPIKEY) --skip-duplicate --source https://api.nuget.org/v3/index.json *.symbols.nupkg
  displayName: "\U0001F680 Publish packages to nuget.org"
  workingDirectory: $(Build.ArtifactStagingDirectory)
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))