trigger:
  branches:
    include:
    - '*'
  paths:
    include:
    - src
    - build

pool:
  vmImage: 'windows-2019'

variables:
  packArguments: '-o "$(Build.ArtifactStagingDirectory)" -p:TreatWarningsAsErrors=true -p:ContinuousIntegrationBuild=true'

steps:
- checkout: self
  clean: true
  persistCredentials: true

- script: dotnet nuget locals all --clear
  displayName: "\U0001F4A3 Cleanup NuGet"

- task: DotNetCoreCLI@2
  displayName: "\U0001F6E0 Build and pack projects"
  inputs:
    command: 'custom'
    projects: 'Rocketcress.sln'
    custom: 'pack'
    arguments: '-c Release $(packArguments)'

- task: DotNetCoreCLI@2
  displayName: "\U0001F308 Run Unit Tests"
  inputs:
    command: 'test'
    projects: 'Rocketcress.sln'
    arguments: '-c Release --no-restore --no-build --collect "Code coverage" -p:TreatWarningsAsErrors=true'

- task: DotNetCoreCLI@2
  displayName: "\U0001F6E0 Build and pack slim projects"
  inputs:
    command: 'custom'
    projects: 'Rocketcress.sln'
    custom: 'pack'
    arguments: '-c Release-Slim $(packArguments)'

- task: PublishBuildArtifacts@1
  displayName: "\U0001F6EB Publish packages to Azure Pipeline"
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'

- powershell: |
    foreach ($file in Get-ChildItem *.nupkg) {
        Write-Output "Pushing $($file.name)..."
        [string]$output = dotnet nuget push --api-key $(NuGetApiKey) --source https://api.nuget.org/v3/index.json $file.FullName
        if ($output.Contains("already exists")) {
            Write-Output "Package already exists: $($file.Name)"
            $LASTEXITCODE = 0
        } elseif ($LASTEXITCODE -ne 0) {
            Write-Output $output
            break
        } else {
            Write-Output "Successfully pushed package: $($file.Name)"
        }
        Write-Output ""
    }
  displayName: "\U0001F680 Publish packages to nuget.org"
  workingDirectory: $(Build.ArtifactStagingDirectory)
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))

- powershell: |
    $ErrorActionPreference = "Continue"
    $hasError = $false
    foreach ($file in Get-ChildItem -Path "$(Build.ArtifactStagingDirectory)" -Filter *.nupkg) {
      Write-Output "Processing file $($file.name)..."

      $match = [Text.RegularExpressions.Regex]::Match($file.name, "Serviceware\.Rocketcress\.(?<Name>.+?)\.(Slim\.)?(?<Version>[\.0-9]+).*\.nupkg")
      if ($match.Success) {
        $tagName = "$($match.Groups["Name"])/$($match.Groups["Version"])"
        git rev-parse "$tagName" 2>&1>$null

        if ($LASTEXITCODE -eq 0) {
          Write-Host "The tag `"$tagName`" already exists."
        } else {
          Write-Host "The tag `"$tagName`" does not exist."
          Write-Host "Creating and pushing tag `"$tagName`"..."
          git tag "$tagName"
          git push origin "$tagName"
        }
      } else {
        Write-Output "##vso[task.logissue type=warning]Could not parse filename $($file.name) correctly."
        $hasError = $true
      }
    }
    if ($hasError) {
      $LASTEXITCODE = -1
    } else {
      $LASTEXITCODE = 0
    }
  displayName: "\U0001F516 Create tags"
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  continueOnError: true